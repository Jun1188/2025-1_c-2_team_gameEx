다음은 .cpp로 작성된 코드다.
*만일 코드 컴파일에 오류가 있다면 카톡방이나 디스코드에 알려주세요

문제 01.


1. 출력값을 예측하라.

2. 다음 코드에서 Add의 전달인자를 a로 바꾼다고 할 때, 매개변수의 자료형만을 수정하여 이전과 같은 출력이 나오게 하라




#include <iostream>


void Add(int* ap){

++(*ap);

}

int main()
{

int a = 4;

std::cout << a << '\n';

Add(&a);

std::cout << a;

}








문제 02

void Bark()와 char* sound을 인자로 가지는 Animal이라는 class가 있다고 하자.

이때 동적 할당, 생성자, 상속, 소멸자, 가상함수를 이용해 Cat과 Dog라는 class를 만들고, main을 빌드할 때 컴파일 오류가 나지 않으며,
 적절한 울음소리가 출력되게 빈 부분 및 전체코드를 작성하라.

단, 프로그램 종료 시에 코드상 메모리 누수는 없어야 한다.
단, 개의 숫자는 입력받는 만큼 있어야 하고, 개의 Bark는 n번 호출하면 울음소리를 n번만 뱉어야 한다.

단, 각 객체의 울음소리는 모두 달라야 한다.
{예시:
cats[0]는 "야옹!", cats[1]은 "야오옹!"하고 짖는다
}
단, 원래 코드에 추가는 하되 원래 코드의 일부를 지워선 안 된다.(원래 코드에 잘못된 부분이 있으면 말씀해주시면 감사하겠습니다.)

동적 할당은 다음과 같이 작성된다.
int* ps = new int[10]{};
int* p = new int{};
동적 할당의 메모리 반환은 다음과 같이 한다.
delete[] ps;
delete p;




#include <iostream>
#define MAX 10


class Cat{

void Bark(){

}

}

class Dog{

void Bark(){

}

}

int main()
{

Cat cats[MAX];

size_t dogMax;
std::cout << "개 울음횟수 입력: ";
std::cin >> dogMax;

Dog** dogs = new Dog*[MAX];

for(Cat& cs : cats)
cs.Bark();

for(int i=0; i<10; ++i){
dogs[i]->Bark();
}


}






문제 03


c++에는 String이라는 문자열 클래스가 있다. 
이 클래스는 문자열의 덧셈과 비교연산을 지원한다.

이제 우리는 문자를 더하되, 더할 때는 한칸 띄고 더하고, 뺄셈을 하면 앞의 변수의 문자열이 뒤의 변수 문자열 길이만큼 뒤에서부터 삭제되고,
후위증감, 전위증감(++)을 하면 해당 연산을 하되 1을 더하는 대신 뒤에 공백이 한칸 늘어나는 클래스인
XString을 만들려 한다.

(예시(객체 대신 문자열 리터럴을 사용하였다): 
"고양이가" + "좋다" -> "고양이가 좋다"
"고양이가" - "좋다" -> "고양"
"좋다" - "고양이가" -> ""
++"고양이" + "좋다" -> "고양이 좋다")

연산자 오버로딩을 이용해 이를 만족하는 코드를 작성하라.
또한 해당 클래스는 void Add()와 void Add(XString&)을 멤버함수로 가지며, 전자는 문자열의 각 문자에 아스키코드 기준 1을 더하는 연산, 
후자는 함수를 소유한 객체와 전달인자인 객체 모두에 덧셈 연산을 한다





문제 04

GameManager, Monster,
Orc, HellHound, Ghost, Player라는 클래스를 통해 텍스트를 입력받고 적절한 텍스트를 출력하는, 짧은 RPG게임을 객체지향적으로 제작하라.
이외 클래스나 함수 등등을 추가해도 좋다.
플레이타임은 상관하지 않는다.